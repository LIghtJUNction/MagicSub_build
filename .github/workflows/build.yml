name: Build Sub-Store Native Android Binary

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行
  workflow_dispatch:      # 手动触发
  push:
    paths:
      - '.github/workflows/build.yml'  # 当此文件更新时触发
    branches:
      - master            # 在 main 分支上

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Android ND,
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build
          git clone https://github.com/bellard/quickjs.git
          
      - name: Build QuickJS for Android
        run: |
          cd quickjs
          # 先构建本地版本的 qjsc 编译器
          make clean
          make qjsc
          mv qjsc qjsc-host
          
          # 再构建 Android 版本的运行时库
          make clean
          # 配置交叉编译
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export TARGET=aarch64-linux-android
          export API=21
          export AR=$TOOLCHAIN/bin/llvm-ar
          export CC=$TOOLCHAIN/bin/${TARGET}${API}-clang
          export AS=$CC
          export CXX=$TOOLCHAIN/bin/${TARGET}${API}-clang++
          export LD=$TOOLCHAIN/bin/ld
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN/bin/llvm-strip
          
          # 直接编译所需的对象文件
          $CC -c -o quickjs.o quickjs.c -I. -fPIC \
              -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o libregexp.o libregexp.c -I. -fPIC \
              -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o libunicode.o libunicode.c -I. -fPIC \
              -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o cutils.o cutils.c -I. -fPIC \
              -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o quickjs-libc.o quickjs-libc.c -I. -fPIC \
              -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o libbf.o libbf.c -I. -fPIC \
              -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          
          # 创建静态库
          $AR rcs libquickjs.a quickjs.o libregexp.o libunicode.o cutils.o quickjs-libc.o libbf.o
          
      - name: Download and Process Sub-Store
        run: |
          # 下载最新的 sub-store.min.js
          curl -L -o sub-store.min.js https://github.com/sub-store-org/Sub-Store/releases/download/2.14.445/sub-store.min.js
          
          # 创建启动包装脚本
          cat > sub-store-wrapper.js << 'EOF'
          import * as std from 'std';
          import * as os from 'os';
          
          globalThis.start_sub_store = function() {
              // 读取并执行原始的 sub-store 代码
              const subStoreCode = std.loadFile('sub-store.min.js');
              eval(subStoreCode);
              
              // 保持进程运行
              while(true) {
                  os.sleep(1000);
              }
              return 0;
          }
          EOF
          
          # 创建 C 包装代码
          cat > sub-store-main.c << 'EOF'
          #include <stdio.h>
          #include "quickjs.h"
          #include "quickjs-libc.h"
          
          // 声明从 JavaScript 生成的字节码数据
          extern const uint32_t qjsc_sub_store_size;
          extern const uint8_t qjsc_sub_store[];
          
          int main(int argc, char **argv) {
              JSRuntime *rt;
              JSContext *ctx;
              
              // 初始化 QuickJS
              rt = JS_NewRuntime();
              if (!rt) {
                  fprintf(stderr, "Failed to create JS runtime\n");
                  return 1;
              }
              
              ctx = JS_NewContext(rt);
              if (!ctx) {
                  JS_FreeRuntime(rt);
                  fprintf(stderr, "Failed to create JS context\n");
                  return 1;
              }
              
              // 初始化标准库
              js_std_init_handlers(rt);
              js_std_add_helpers(ctx, argc, argv);
              js_init_module_std(ctx, "std");
              js_init_module_os(ctx, "os");
              
              // 执行生成的 JavaScript 代码
              JSValue val = JS_Eval(ctx, (const char *)qjsc_sub_store, qjsc_sub_store_size, "sub-store.js", JS_EVAL_TYPE_GLOBAL);
              if (JS_IsException(val)) {
                  js_std_dump_error(ctx);
                  return 1;
              }
              
              // 调用 start_sub_store 函数
              JSValue global = JS_GetGlobalObject(ctx);
              JSValue start_fn = JS_GetPropertyStr(ctx, global, "start_sub_store");
              if (!JS_IsException(start_fn)) {
                  JSValue ret = JS_Call(ctx, start_fn, global, 0, NULL);
                  if (JS_IsException(ret)) {
                      js_std_dump_error(ctx);
                  }
                  JS_FreeValue(ctx, ret);
              }
              JS_FreeValue(ctx, start_fn);
              JS_FreeValue(ctx, global);
              
              // 清理
              js_std_free_handlers(rt);
              JS_FreeContext(ctx);
              JS_FreeRuntime(rt);
              
              return 0;
          }
          EOF
          
      - name: Create Binary
        run: |
          cd quickjs
          # 使用本地编译的 qjsc 生成 C 代码，使用模块模式
          ./qjsc-host -m -c -o ../sub-store.c ../sub-store-wrapper.js
          
          # 使用 Android NDK 编译最终的二进制文件
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export TARGET=aarch64-linux-android
          export API=21
          export CC=$TOOLCHAIN/bin/${TARGET}${API}-clang
          
          # 先编译生成的 JavaScript 代码
          $CC -c -o ../sub-store.o ../sub-store.c -I.
          
          # 编译主程序
          $CC -c -o ../sub-store-main.o ../sub-store-main.c -I.
          
          # 编译 QuickJS 源文件
          $CC -c -o quickjs.o quickjs.c -I. -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o libregexp.o libregexp.c -I. -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o libunicode.o libunicode.c -I. -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o cutils.o cutils.c -I. -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o quickjs-libc.o quickjs-libc.c -I. -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          $CC -c -o libbf.o libbf.c -I. -D_GNU_SOURCE -DCONFIG_VERSION='"2024-02-14"' -DCONFIG_BIGNUM
          
          # 链接所有对象文件
          $CC -o ../sub-store-android \
              ../sub-store.o ../sub-store-main.o \
              quickjs.o libregexp.o libunicode.o cutils.o quickjs-libc.o libbf.o \
              -lm -ldl
          
          # strip 二进制文件
          $TOOLCHAIN/bin/llvm-strip ../sub-store-android
          
      - name: Create Service Script
        run: |
          cat > sub-store.service << 'EOF'
          [Unit]
          Description=Sub-Store Service
          After=network.target
          
          [Service]
          Type=simple
          ExecStart=/data/local/tmp/sub-store-android
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
      - name: Package Release
        run: |
          mkdir -p release
          cp sub-store-android release/
          cp sub-store.service release/
          
          # 创建安装脚本
          cat > release/install.sh << 'EOF'
          #!/system/bin/sh
          
          # 复制二进制文件
          cp sub-store-android /data/local/tmp/
          chmod 755 /data/local/tmp/sub-store-android
          
          # 如果系统支持 systemd，安装服务
          if [ -d "/system/etc/systemd/system" ]; then
            cp sub-store.service /system/etc/systemd/system/
            systemctl enable sub-store
            systemctl start sub-store
          else
            # 否则使用 init.d
            cp sub-store-android /system/bin/
            cat > /system/etc/init.d/sub-store << 'END'
            #!/system/bin/sh
            /data/local/tmp/sub-store-android &
            END
            chmod 755 /system/etc/init.d/sub-store
          fi
          EOF
          
          chmod +x release/install.sh
          cd release && zip -r ../sub-store-android.zip ./*
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: sub-store-android.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sub-store-android
          path: sub-store-android.zip